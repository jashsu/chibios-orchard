
Attacker (a):
                         +----------> GRANT_SCREEN --> EXIT
                         |
NONE ---> IDLE ---> enemy_select ---> APPROVAL_WAIT
                                             |
________________                             | OP_STARTBATTLE (a->b) 
Victim (b):     |                            v
----------------+                      APPROVAL_DEMAND
                                        |         | (accepts)
IDLE <-- OP_DECLINED (b->a) ----------<-+         |
 +                                                |  OP_STARTBATTLE_ACK (b->a)
 |                                                v
 +----> GRANT_RECV --> EXIT                    VS_SCREEN (both)
                                                  |  (no network traffic, ~2-3 sec after)
                                                  v
                                       +---> MOVE_SELECT (timed)
                                       |           |  OP_IMOVED (a->b or b->a)
                                       |           |
                                       |           v
                                       |      POST_MOVE -- (holding pattern for packets, timed)
                                       |           | either OP_TURNOVER or OP_IMOVED 
                                       |           v
                                       +--- SHOW_RESULTS (when both packets arrive)
                              --or--              |
                                                  v
                                                 DIE ---> IDLE

In post move:

If I move I go to POST MOVE
If you move and I receieve it, we store the packet.

If the timer ticks and we are in POST_MOVE, ---and--- we have both results, we transmit op_turnover
and we block until we get an ACK.



Bugs:

1. Get rid of sleeps in the thread, we can't ack if we are sleeping!
--- I don't think this is true. Because chThdMiliseconds() should wake on interrupt, and we are servicing the interrupt via handler. ---

so in vs_screen:
blink 10 x with 200mS (3 frames) delay....

frames:
30 frames @ 15fps
on frames 0-30, do blinky-text (use a new var?)

then we do animation.
Animation is frame,200ms,frame,frame.... then we switch states.

so, something like:
show frame
count three frames (66*3)
show frame
...




lost-ack problem:

You transmit to me
I send you an ACK
The ACK doesn't make it, you are still in waitack state.
-- you transmit again. 
We ACK again. 

If our queue depth was > 1 we'd have an issue. but it is not

We need to investigate failure modes and find out where we are hanging
new debug code will help with this. 






